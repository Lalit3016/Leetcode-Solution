// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
#define MAX 1000


 // } Driver Code Ends
/*You are required to complete this method*/

class Solution{
     vector<int > nextSmaller(int *arr ,int n)
   {
       stack<int>s;
       s.push(-1);

       vector<int> ans(n);

       for(int i=n-1; i>=0; i--)
       {
           int curr=arr[i];//3 2 6 5 1 0
           while(s.top() != -1 && arr[s.top()] >= curr)
           {
               s.pop();//2 3 4
           }
           ans[i]=s.top();//1 -1 4 4 -1 -1
           s.push(i);//1 0
       }



       return ans;
   }
    vector<int> previousSmaller(int *arr ,int n)
    {
        stack<int>s;
       s.push(-1);

       vector<int> ans(n);

       for(int i=0; i<n; i++)
       {
           int curr=arr[i];//3 2 6 5 1 0
           while(s.top() != -1 && arr[s.top()] >= curr)
           {
               s.pop();//2 3 4
           }
           ans[i]=s.top();//1 -1 3 4 -1 -1
           s.push(i);//1 0
       }

        return ans;
    }

    int largestRectangleArea(int *heights,int n) {

     //   int n = heights.size();

        vector<int> next(n);
        next= nextSmaller(heights,n);


      //  for(int i=0; i<n; i++)

       vector<int> prev(n);
        prev= previousSmaller(heights,n);



     int area =INT_MIN;

        for(int i=0; i<n; i++)
        {
            int len= heights[i];//2,1,5,6,2,3

            if(next[i]==-1)
            {
                next[i] = n;
            }

            int bredth= next[i]- prev[i]-1;

            int newArea= len*bredth;

            area= max(area,newArea);

        }

     return area;
    }
    
    
  public:
    int maxArea(int M[MAX][MAX], int n, int m) {
        // Your code here
       // area for first row
       
        int area = largestRectangleArea(M[0],m);
        
        // for remaininng rows
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                //row updated by adding previous row"s value
                if(M[i][j]!=0)
                {
                    M[i][j]=M[i][j]+M[i-1][j];
                }
                else{
                    M[i][j]=0;
                }
            }
            
            //entire row is updated now
            
            int newArea=  largestRectangleArea(M[i],m);
            area =max(area,newArea);
            
        }
        return area;
    }
};


// { Driver Code Starts.
int main() {
    int T;
    cin >> T;

    int M[MAX][MAX];

    while (T--) {
        int n, m;
        cin >> n >> m;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> M[i][j];
            }
        }
        Solution obj;
        cout << obj.maxArea(M, n, m) << endl;
    }
}
  // } Driver Code Ends
